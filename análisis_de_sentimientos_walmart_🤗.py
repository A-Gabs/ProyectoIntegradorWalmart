# -*- coding: utf-8 -*-
"""Análisis de sentimientos Walmart 🤗.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MTtDLf8KG_iK2TD9Pq7671HewLzEyUkk

# Líbrerias
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')
import nltk

import nltk
nltk.download('vader_lexicon')

import nltk
nltk.download('punkt')

import nltk
nltk.download('averaged_perceptron_tagger')

import nltk
nltk.download('maxent_ne_chunker')

import nltk
nltk.download('words')

!pip install transformers

"""# Lectura de los datos"""

#Read in data
df = pd.read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vRU-vfcM-qH_L_l1npPAdUm0i4esL7SnalwOWZyikf2dUWiEBiay3VPMxdPErEZYCH37ZeNm9CslXnV/pub?gid=1500831965&single=true&output=csv")
print(df.shape)
df = df.head(500)
print(df.shape)

df.head(2)

"""Creación de un id, para poder rrecorrer."""

df['ID'] = range(1, len(df) + 1)
df.head(4)

df['Review'] = df['Review'].fillna('NA')

"""#Información del dataframe"""

ax = df['Rating'].value_counts().sort_index() \
    .plot(kind='bar',
          title='Count of Reviews by Stars',
          figsize=(10, 5))
ax.set_xlabel('Review Stars')
plt.show()

example = df['Review'][50]
print(example)

tokens = nltk.word_tokenize(example)
tokens[:10]

tagged = nltk.pos_tag(tokens)
tagged[:10]

entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()

"""Step 1. VADER Seniment Scoring

Utiliza un enfoque de "bag of words":

*   Se eliminan las palabras vacías.
*   Se puntúa cada palabra y se combina para obtener una puntuación total.




"""

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

sia.polarity_scores('I am so happy!')

sia.polarity_scores('This is the worst thing ever.')

sia.polarity_scores(example)

"""Se crea una puntuación para cada review (pos/neg/neu)"""

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row['Review']
    myid = row['ID']
    res[myid] = sia.polarity_scores(text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'ID'})
vaders = vaders.merge(df, how='right')

#Ahora tenemos la puntuación del sentimiento y los metadatos
vaders.head()

"""Step 2. Plot VADER result"""

ax = sns.barplot(data=vaders, x='Rating', y='compound')
ax.set_title('Compund Score by Walmart Star Review')
plt.show()

fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='Rating', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Rating', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Rating', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

"""#Roberta Petrained Model -  Hugging Face

*   El modelo transformador tiene en cuenta las palabras, pero también el contexto relacionado con otras palabras.
"""

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

"""Entrenamiento"""

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

print(example)
sia.polarity_scores(example)

"""Corremos el modelo"""

# Run for Roberta Model
encoded_text = tokenizer(example, return_tensors='pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)

"""#Procesos secundarios para el modelo"""

def polarity_scores_roberta(example):
    encoded_text = tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg' : scores[0],
        'roberta_neu' : scores[1],
        'roberta_pos' : scores[2]
    }
    return scores_dict

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    try:
        text = row['Review']
        myid = row['ID']
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[myid] = both
    except RuntimeError:
        print(f'Broke for id {myid}')

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'ID'})
results_df = results_df.merge(df, how='right')

"""Compare Scores between models"""

results_df.columns

"""Step 3. Combine and compare"""

sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos',
                  'roberta_neg', 'roberta_neu', 'roberta_pos'],
            hue='Rating',
            palette='tab10')
plt.show()

"""Step 4:  Examples
Veamos algunos ejemplos en los que la puntuación del modelo y la puntuación de la revisión difieren más
"""

results_df.query('Rating == 1') \
    .sort_values('roberta_pos', ascending=False)['Review'].values[0]

results_df.query('Rating == 1') \
    .sort_values('vader_pos', ascending=False)['Review'].values[0]

results_df.query('Rating == 5') \
    .sort_values('roberta_neg', ascending=False)['Review'].values[0]

results_df.query('Rating == 5') \
    .sort_values('vader_neg', ascending=False)['Review'].values[0]

"""#Prueba del pipeline

Extra: The Transformers Pipeline
"""

from transformers import pipeline

sent_pipeline = pipeline("sentiment-analysis")

sent_pipeline('I love my project!')

sent_pipeline('Excelente producto ')